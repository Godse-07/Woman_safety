name: "Build & Release"

on:
  push:
    branches:
      - main  # or your default branch name
    paths:
      - '**'  # Only trigger on file changes
    tags-ignore:
      - 'v*'  # Ignore version tags to prevent duplicate runs
  pull_request:
    branches:
      - main

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.changed }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Need at least 2 commits to compare

      - name: Check for file changes in relevant directories
        id: check
        run: |
          if git diff --quiet HEAD^ HEAD -- lib/ android/ ios/ pubspec.yaml; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check_changes
    if: needs.check_changes.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # Explicitly set permissions for creating releases

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper diffing

      # Java setup with specific version
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      # Flutter setup with caching
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'
          architecture: x64
          cache: true  # Enable Flutter cache

      # Create Firebase Options with error handling
      - name: Configure Firebase API keys
        env:
          FIREBASE_ANDROID_API_KEY: ${{ secrets.FIREBASE_ANDROID_API_KEY }}
          FIREBASE_ANDROID_APP_ID: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
        run: |
          cat > lib/firebase_options.dart <<EOL
          // Generated Firebase configuration
          import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
          import 'package:flutter/foundation.dart'
              show defaultTargetPlatform, kIsWeb, TargetPlatform;
          class DefaultFirebaseOptions {
            static FirebaseOptions get currentPlatform {
              if (kIsWeb) {
                throw UnsupportedError('Unsupported platform');
              }
              switch (defaultTargetPlatform) {
                case TargetPlatform.android:
                  return android;
                default:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions are not supported for this platform.',
                  );
              }
            }
            static const FirebaseOptions android = FirebaseOptions(
              apiKey: '$FIREBASE_ANDROID_API_KEY',
              appId: '$FIREBASE_ANDROID_APP_ID',
              messagingSenderId: '$FIREBASE_MESSAGING_SENDER_ID',
              projectId: '$FIREBASE_PROJECT_ID',
              storageBucket: '$FIREBASE_STORAGE_BUCKET',
            );
          }
          EOL

      # Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # Build the APK
      - name: Build APK
        run: flutter build apk --release --split-per-abi

      # Release step
      - name: Push to Releases
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/apk/release/*"
          tag: v1.0.${{ github.run_number }}
          token: ${{ secrets.TOKEN }}
