name: "Build & Release"

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build & Release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Java setup
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      # Flutter setup
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'
          architecture: x64

      # Firebase options setup
      - name: Create Firebase Options
        run: |
          cat > lib/firebase_options.dart << 'EOL'
          // File generated by FlutterFire CLI.
          // ignore_for_file: type=lint
          import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
          import 'package:flutter/foundation.dart'
              show defaultTargetPlatform, kIsWeb, TargetPlatform;

          class DefaultFirebaseOptions {
            static FirebaseOptions get currentPlatform {
              if (kIsWeb) {
                throw UnsupportedError('Unsupported platform');
              }
              switch (defaultTargetPlatform) {
                case TargetPlatform.android:
                  return android;
                default:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions are not supported for this platform.',
                  );
              }
            }

            static const FirebaseOptions android = FirebaseOptions(
              apiKey: '${{ vars.FIREBASE_ANDROID_API_KEY }}',
              appId: '${{ vars.FIREBASE_ANDROID_APP_ID }}',
              messagingSenderId: '${{ vars.FIREBASE_MESSAGING_SENDER_ID }}',
              projectId: '${{ vars.FIREBASE_PROJECT_ID }}',
              storageBucket: '${{ vars.FIREBASE_STORAGE_BUCKET }}',
            );
          }
          EOL

      # Install dependencies
      - name: Install dependencies
        run: flutter pub get

      # Build APK
      - name: Build APK
        run: flutter build apk --release

      # Rename APK with version
      - name: Rename APK
        run: |
          mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/app-${{ github.ref_name }}.apk

           # Build APK with fixed version
      - name: Build APK
        run: |
          VERSION_NAME="1.0.0"
          VERSION_CODE=10000
          flutter build apk --release --build-name=$VERSION_NAME --build-number=$VERSION_CODE

      # Rename APK
      - name: Rename APK
        run: |
          mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/app-v1.0.0.apk

      # Create Release (only on tag push)
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/flutter-apk/app-v1.0.0.apk"
          generateReleaseNotes: true
          body: |
            ### Version v1.0.0
            
            **Build Information:**
            - Build Date: ${{ format(now(), 'YYYY-MM-DD HH:mm:ss') }}
            - Commit: ${{ github.sha }}
            - Flutter Version: 3.24.3
            
            #### What's New
            ${{ github.event.head_commit.message }}
            
            For full changelog, please see the commit history.
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release v1.0.0
          tag: v1.0.0
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true